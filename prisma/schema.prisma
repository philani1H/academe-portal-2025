// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  status        UserStatus @default(PENDING)
  department    String?
  specialization String?
  avatar        String?
  lastActive    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  courses       Course[]
  assignments   Assignment[]
  submissions   Submission[]
  notifications Notification[]
  enrollments   Enrollment[]
  grades        Grade[]

  @@map("users")
}

model Course {
  id          String        @id @default(cuid())
  name        String
  description String
  tutorId     String
  status      CourseStatus  @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  tutor       User          @relation(fields: [tutorId], references: [id])
  enrollments Enrollment[]
  assignments Assignment[]
  materials   Material[]
  tests       Test[]

  @@map("courses")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  headId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  head        User     @relation(fields: [headId], references: [id])
  courses     Course[]

  @@map("departments")
}

model Assignment {
  id          String            @id @default(cuid())
  title       String
  description String
  courseId    String
  dueDate     DateTime
  status      AssignmentStatus  @default(DRAFT)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  course      Course            @relation(fields: [courseId], references: [id])
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id           String           @id @default(cuid())
  assignmentId String
  studentId    String
  content      String
  fileUrl      String?
  status       SubmissionStatus @default(SUBMITTED)
  grade        Float?
  feedback     String?
  submittedAt  DateTime         @default(now())
  gradedAt     DateTime?

  // Relations
  assignment   Assignment       @relation(fields: [assignmentId], references: [id])
  student      User             @relation(fields: [studentId], references: [id])

  @@map("submissions")
}

model Test {
  id        String     @id @default(cuid())
  title     String
  courseId  String
  date      DateTime
  duration  Int        // in minutes
  status    TestStatus @default(DRAFT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  course    Course     @relation(fields: [courseId], references: [id])
  questions Question[]

  @@map("tests")
}

model Question {
  id       String     @id @default(cuid())
  testId   String
  question String
  type     QuestionType
  options  String[]   // JSON array of options
  answer   String
  points   Int        @default(1)
  order    Int

  // Relations
  test     Test       @relation(fields: [testId], references: [id])

  @@map("questions")
}

model Material {
  id        String       @id @default(cuid())
  title     String
  content   String
  type      MaterialType
  fileUrl   String?
  courseId  String
  createdAt DateTime     @default(now())

  // Relations
  course    Course       @relation(fields: [courseId], references: [id])

  @@map("materials")
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  enrolledAt DateTime @default(now())

  // Relations
  student   User     @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Grade {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  grade     Float
  type      GradeType
  createdAt DateTime @default(now())

  // Relations
  student   User     @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("grades")
}

model Notification {
  id           String           @id @default(cuid())
  title        String
  message      String
  type         NotificationType @default(INFO)
  userId       String?
  courseId     String?
  assignmentId String?
  testId       String?
  read         Boolean          @default(false)
  createdAt    DateTime         @default(now())

  // Relations
  user         User?            @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Enums
enum Role {
  ADMIN
  TUTOR
  STUDENT
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
  REJECTED
}

enum CourseStatus {
  DRAFT
  ACTIVE
  INACTIVE
  COMPLETED
}

enum AssignmentStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  LATE
}

enum TestStatus {
  DRAFT
  PUBLISHED
  COMPLETED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

enum MaterialType {
  PDF
  VIDEO
  DOCUMENT
  LINK
  PRESENTATION
}

enum GradeType {
  ASSIGNMENT
  TEST
  QUIZ
  PROJECT
  FINAL
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}